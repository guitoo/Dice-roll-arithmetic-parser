#!/usr/bin/env python

import sys
from random import randint
from sly import Lexer, Parser

class CalcLexer(Lexer):
    tokens = { INTEGER }
    ignore = ' \t'
    literals = { '=', '+', '-', '*', 'x', '/', '(', ')', 'd' , ','}

    @_(r'\d+')
    def INTEGER(self, t):
        t.value = int(t.value)
        return t

    def error(self, t):
        print("Illegal character '%s'" % t.value[0])
        self.index += 1

class CalcParser(Parser):
    tokens = CalcLexer.tokens

    precedence = (
        ('left', ','),
        ('left', '+', '-'),
        ('left', '*', 'x', '/'),
        ('left', 'd'),
        ('right', 'UMINUS'),
        )

    def __init__(self):
        pass

    @_('list_')
    def statement(self, p):
        return p.list_

    @_('expr')
    def statement(self, p):
        return p.expr
        # print(p.expr)

    @_('expr "+" expr')
    def expr(self, p):
        return p.expr0 + p.expr1

    @_('expr "-" expr')
    def expr(self, p):
        return p.expr0 - p.expr1

    @_('expr "*" expr')
    def expr(self, p):
        return p.expr0 * p.expr1

    @_('expr "x" expr')
    def expr(self, p):
        return p.expr0 * p.expr1

    @_('expr "/" expr')
    def expr(self, p):
        return p.expr0 / p.expr1

    @_('"-" expr %prec UMINUS')
    def expr(self, p):
        return -p.expr

    @_('"(" expr ")"')
    def expr(self, p):
        return p.expr

    @_('INTEGER')
    def expr(self, p):
        return p.INTEGER
    
    @_('INTEGER "d" INTEGER')
    def expr(self, p):
        return p.INTEGER0 * randint(1,p.INTEGER1)
    
    @_('"d" INTEGER')
    def expr(self, p):
        return randint(1,p.INTEGER)

    @_('expr "," expr')
    def list_(self, p):
        return [p.expr0, p.expr1]

    @_('list_ "," expr')
    def list_(self, p):
        return p.list_ + [p.expr]

if __name__ == "__main__":
    lexer = CalcLexer()
    parser = CalcParser()
    text = "".join(sys.argv[1:])
    print(parser.parse(lexer.tokenize(text)))